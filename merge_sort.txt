Divide And Counquer



#include <iostream>

using namespace std;

void merge(int *arr,int s,int e){
    
    int mid = (s+e)/2;
    
    int len1 = mid -s +1;
    int len2 = e - mid;
    
    int *first = new int[len1];
    int *second = new int[len2];
    
    int k = s;
    for(int i = 0;i<len1;i++){
        first[i] = arr[k++];
    }
    
    k = mid +1;
    for(int i=0;i<len2;i++){
        second[i] = arr[k++];
    }
    
    int in1 = 0;
    int in2 = 0;
    k = s;
    while(in1<len1 && in2 < len2){
        if(first[in1]<second[in2]){
            arr[k++] = first[in1++];
        }
        else{
            arr[k++] = second[in2++];
        }
    }
    
    while(in1<len1){
       arr[k++] = first[in1++]; 
    }
    
    while(in2<len2){
        arr[k++] = second[in2++];
    }
    
}


void mergesort(int *arr,int s,int e){
    
    if(s>=e){
        return ;
    }
    
    int mid = (s+e)/2;
    
    mergesort(arr, s, mid);
    mergesort(arr,mid+1,e);
    merge(arr,s,e);
}

void reverse(int * arr,int s,int e){
    
    
    if(s>=e){
        return;
    }
    swap(arr[s],arr[e]);
    reverse(arr,s+1,e-1);
}

int main()
{
    int arr[5] = {4,5,7,2,1};
    int n = 5;
    
    mergesort(arr,0,n-1);
    
    //reverse(arr,0,n-1);
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;

    return 0;
}