bit manupulation




#include <iostream>

using namespace std;

int getithbit(int i,int n){
    int mask = (1<<i);
    return (n & mask) > 0 ? 1:0;
}
void setithbit(int &n,int i){
    int mask = 1<<i;
    n = (n|mask);
}
// void clearithbit(int &n,int i){
//     int mask = ~(1<<i);
//     n = n &mask;
// }
// void updateithbit(int &n,int i,int v){
//     clearithbit(n,i);
//     int mask = v<<i;
//     n = n|mask;
// }
void clearithbit(int &n,int i ){
     int mask = (-1<<i);
     n = n & mask;
}
void clearbitsinrange(int &n,int i,int j){
    int a = (~0)<<(j+1);
    int b = (1<<i)-1;
    int mask = a|b;
    n = n&mask;
}

int count_bits_hack(int n){
    
    int ans = 0;
    while(n>0){
        n = n & (n-1);
        ans++;
    }
    return ans;
}
int main()
{
    int n = 15;
    //int i=1,j = 3;
    //cin>>i;
    
    //cout<<getithbit(i,n)<<endl;
    //setithbit(n,i);
    //clearithbit(n,i);
    //updateithbit(n,i,1);
    //clearithbit(n,i);
    //clearbitsinrange(n,i,j);
    cout<<count_bits_hack(n);
    //cout<<n<<endl;

    return 0;
}

#include <iostream>

using namespace std;

int fastexponention(int a,int n){
    int ans = 1;
     while(n>0){
         int last_bit = (n&1);
         if(last_bit){
             ans= ans *a;
         }
         a = a*a;
         n = n>>1;
     }
     return ans;
}
int main()
{
    // int n;
    // cin>>n;
    // if((n & (n-1))==0){
    //     cout<<"YES POWER OF 2"<<endl;
    // }
    // else{
    //     cout<<"NOT POWER OF 2"<<endl;
    // }
    int a,n;
    cin>>a>>n;
    cout<<fastexponention(a,n);
    

    return 0;
}